import os

# --- Clé AES 128 bits (16 octets)
key = bytes.fromhex("000102030405060708090a0b0c0d0e0f")

# --- S-BOX officielle AES
S_BOX = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]

# --- Entrée utilisateur
message = input("Entrez un message (max 16 caractères) : ")
message = message.ljust(16)

# --- Conversion en hex
message_hex = message.encode("utf-8").hex()
octets = [message_hex[i:i+2] for i in range(0, len(message_hex), 2)]

# --- Créer la matrice (COLONNE PAR COLONNE)
state = [[0]*4 for _ in range(4)]
index = 0
for c in range(4):
    for r in range(4):
        state[r][c] = octets[index]
        index += 1

print("\nMatrice 4x4 ")
for ligne in state:
    print(ligne)

# --- Fonction AddRoundKey
def add_round_key(state, key_bytes):
    round_key = [[0]*4 for _ in range(4)]
    index = 0
    for c in range(4):
        for r in range(4):
            round_key[r][c] = format(key_bytes[index], '02x')
            index += 1

    for i in range(4):
        for j in range(4):
            s = int(state[i][j], 16)
            k = int(round_key[i][j], 16)
            state[i][j] = format(s ^ k, '02x')
    return state

# --- Appliquer AddRoundKey en premier



# --- Fonction SubBytes
def sub_bytes(state):
    for i in range(4):
        for j in range(4):
            byte = int(state[i][j], 16)
            row = byte >> 4
            col = byte & 0x0F
            state[i][j] = format(S_BOX[row][col], '02x')
    return state

# --- Ensuite, SubBytes





# --- Fonction ShiftRows
def shift_rows(state):
    # Chaque ligne est décalée vers la gauche d'un nombre de positions égal à son indice
    new_state = [[0]*4 for _ in range(4)]

    # Ligne 0 : pas de décalage
    new_state[0] = state[0]

    # Ligne 1 : décalage de 1 vers la gauche
    new_state[1] = state[1][1:] + state[1][:1]

    # Ligne 2 : décalage de 2 vers la gauche
    new_state[2] = state[2][2:] + state[2][:2]

    # Ligne 3 : décalage de 3 vers la gauche (ou 1 vers la droite)
    new_state[3] = state[3][3:] + state[3][:3]

    return new_state


# --- Ensuite, ShiftRows



# --- Fonction utilitaire pour multiplication dans GF(2^8)
def xtime(a):
    a = a << 1
    if a & 0x100:
        a ^= 0x11B  # polynôme irréductible AES
    return a & 0xFF

def mul(a, b):
    res = 0
    for i in range(8):
        if b & 1:
            res ^= a
        a = xtime(a)
        b >>= 1
    return res

# --- Fonction MixColumns
def mix_columns(state):
    for c in range(4):  # Pour chaque colonne
        a = [int(state[r][c], 16) for r in range(4)]
        # Multiplication par la matrice AES
        state[0][c] = format(mul(a[0], 2) ^ mul(a[1], 3) ^ a[2] ^ a[3], '02x')
        state[1][c] = format(a[0] ^ mul(a[1], 2) ^ mul(a[2], 3) ^ a[3], '02x')
        state[2][c] = format(a[0] ^ a[1] ^ mul(a[2], 2) ^ mul(a[3], 3), '02x')
        state[3][c] = format(mul(a[0], 3) ^ a[1] ^ a[2] ^ mul(a[3], 2), '02x')
    return state


# --- Ensuite, MixColumns


print("\nMatrice 4x4 (après MixColumns) :")
for ligne in state:
    print(ligne)

def AESchiffrement(state):
    # --- Étape initiale : AddRoundKey
    state = add_round_key(state, key)

    # --- 9 premiers tours complets
    for i in range(9):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, key)  # (même clé ici, simplifié)

    # --- 10e tour (sans MixColumns)
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, key)

    return state

state= AESchiffrement(state)
print("\nmatrice chiffre par AES")
for ligne in state:
    print(ligne)